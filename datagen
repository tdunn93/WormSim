var gnodes;

//fd layout 
var force;

//var for svg elements
var svg;

var w = 500;
var h = 350;

var dataset1 = {
  nodes: [
      { name: "Manchester University", system_type: "W32", social_eng: " false"
               , intrusion_detect: " false", honeypot: " false"
       , infected_with: "none", adjacent_to: [1, 2]},
      { name: "Leeds University", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
       , infected_with: "none", adjacent_to: [2, 0]},
      { name: "Liverpool Univeristy", system_type: "W32", social_eng: " false"
            , intrusion_detect: " false", honeypot: " false"
       , infected_with: "none", adjacent_to: [1, 0]},

    ],
  edges: [
    { source: 0, target: 1 },
    { source: 0, target: 2 },
	{ source: 1, target: 2 },
	{ source: 1, target: 0 },
	{ source: 2, target: 1 },
   ]
 };

var dataset2 = {
  nodes: [
    { name: "Manchester University", system_type: "W32", social_eng: " false"
            , intrusion_detect: " false", honeypot: " false"
            , infected_with: "none", adjacent_to: [1, 6, 3]},
    { name: "Leeds University", system_type: "W32", social_eng: " false"
            , intrusion_detect: " false", honeypot: " false"
            , infected_with: "none", adjacent_to: [2, 0]},
    { name: "Liverpool Univeristy", system_type: "W32", social_eng: " false"
            , intrusion_detect: " false", honeypot: " false"
            , infected_with: "none", adjacent_to: [1, 6]},
    { name: "University of Bristol", system_type: "W32", social_eng: " false"
            , intrusion_detect: " false", honeypot: " false"
            , infected_with: "none", adjacent_to: [0, 6]},
    { name: "Imperial College London", system_type: "W32", social_eng: " false"
            , intrusion_detect: " false", honeypot: " false"
            , infected_with: "none", adjacent_to: [5, 6]},
    { name: "University of Edinburgh", system_type: "W32", social_eng: " false"
            , intrusion_detect: " false", honeypot: " false"
            , infected_with: "none", adjacent_to: [4]},
    { name: "Univeristy College London", system_type: "W32"
            , social_eng: " false"
            , intrusion_detect: " false", honeypot: " false"
            , infected_with: "none", adjacent_to: [0, 2, 3, 4]},
    ],
  edges: [
    { source: 0, target: 1 },
	{ source: 1, target: 2 },
	{ source: 1, target: 0 },
	{ source: 2, target: 1 },
	{ source: 3, target: 6 },
	{ source: 3, target: 0 },
	{ source: 4, target: 6 },
	{ source: 5, target: 4 },
	{ source: 6, target: 2 },
	{ source: 6, target: 0 },

   ]
 };

var dataset3 = {
  nodes: [
    { name: "Manchester University", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [1, 3, 6, 11, 14]},
    { name: "Leeds University", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [0, 2, 8, 11, 14]},
    { name: "Liverpool Univeristy", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [1, 6, 11, 12, 14]},
    { name: "University of Bristol", system_type: "W32", social_eng: " false" 
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [0, 6]},
    { name: "Imperial College London", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [5, 6, 7]},
    { name: "University of Edinburgh", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [4, 10]},
    { name: "Univeristy College London", system_type: "W32"
             , social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [3, 4, 7, 10]},
    { name: "Univeristy of Nottingham", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [4, 6, 12, 13]},
    { name: "University of Sheffield", system_type: "W32", social_eng: " false" 
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [1, 9, 10]},
    { name: "University of York", system_type: "W32", social_eng: " false" 
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [8, 10]},
    { name: "London School of Economics", system_type: "W32"
             , social_eng: " false" 
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [5, 6, 8, 9]},
    { name: "Oxford University", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [0, 2]},
    { name: "Cambridge University", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [2, 7]},
    { name: "Trinity College Dublin", system_type: "W32", social_eng: " false"
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [7]},
    { name: "University of Glasgow", system_type: "W32", social_eng: " false" 
             , intrusion_detect: " false", honeypot: " false"
             , infected_with: "none", adjacent_to: [0, 2]},
    ],
  edges: [
    { source: 0, target: 1 },
	{ source: 1, target: 2 },
	{ source: 1, target: 0 },
	{ source: 2, target: 1 },
	{ source: 3, target: 6 },
	{ source: 3, target: 0 },
	{ source: 4, target: 6 },
	{ source: 5, target: 4 },
	{ source: 6, target: 2 },
	{ source: 6, target: 0 },
	{ source: 7, target: 4 },
	{ source: 7, target: 6 },
	{ source: 8, target: 10 },
	{ source: 8, target: 1 },
	{ source: 9, target: 8 },
	{ source: 10, target: 6 },
	{ source: 10, target: 5 },
	{ source: 10, target: 9 },
	{ source: 11, target: 2 },
	{ source: 11, target: 0 },
	{ source: 12, target: 7 },
	{ source: 12, target: 2 },
	{ source: 13, target: 7 },
	{ source: 14, target: 2 },
	{ source: 14, target: 0 },
   ]
 };
 //Initialize a default force layout, using the nodes and edges in dataset
var colors = d3.scale.category10();
var levelOne = function()
{
  d3.selectAll("svg").remove(); //remove all the svg elements for new graph
  generate_dropdown(dataset1, "divLevelOne");
  generate_graph(dataset1)
}
var levelTwo = function()
{
  console.log("blaah" + $('<br/>').html() + "blaaah");
  d3.selectAll("svg").remove();
  generate_dropdown(dataset2, "divLevelTwo");
  generate_graph(dataset2)
} 
var levelThree = function()
{
  d3.selectAll("svg").remove();
  generate_dropdown(dataset3, "divLevelThree");
  generate_graph(dataset3)
}       
var levelCustom = function()
{
  d3.selectAll("svg").remove();
}

//generate_graph(dataset3); 
//Graph generator
function generate_graph(dataset)
{

  force = d3.layout.force()
    .nodes(dataset.nodes)
    .links(dataset.edges)
    .size([w, h])
    .linkDistance([100])
    .charge([-300])
    .start()
    .on("end", function() {
      converged = true;
  });
    

	              
  //Create an SVG element
     svg = d3.select("body")
    .append("svg")
    .attr("width", w)
    .attr("height", h);
			
//Create edges as lines
  var edges = svg.selectAll("line")
    .data(dataset.edges)
    .enter()
    .append("line")
    .style("stroke", "#ccc")
    .style("stroke-width", 1);
 
//Create a group of elements for the nodes
     gnodes = svg.selectAll('g.gnode')
    .data(dataset.nodes)
    .enter()
    .append('g')
    .classed('gnode', true)

    
//Add a circle to the node   
  var nodes = gnodes.append("circle")
    /*.attr("xlink:href", "/Desktop/project-folder/comp.ico")
    .attr("x", -8)
    .attr("y", -8)
    .attr("width", 30)
    .attr("height", 30)
  */
  .attr("class", "node")
  .attr("r", 10)
  .style("fill", function(d) {
      if(d.infected_with == "W32.BORM") 
          return "red";
      else if(d.infected_with == "W32.BLASTER")
          return "purple";
      else if(d.infected_with == "W32.BASIC")
          return "yellow";
      else {
          return "green";
      }
   })
    .on("mouseover", function(d) {
      d3.select(labels[0][d.index])
      .style("visibility", "visible");
    })
    .on("mouseout", function(d) {
       d3.select(labels[0][d.index])
       .style("visibility", "hidden");
    })
    //.on("click", function(d) {
    
    .call(force.drag);

//Labels for the group
  
  var labels = gnodes.append("text")
    .text(function(d) { 
        return ("Network: " + d.name ); 
    })
    .attr("class","nodetext")
    .attr("dx", 0)
    .attr("dy", ".35em")
    .style("font-size","5px")
    .attr("text-anchor", "middle")
    //.style("fill", "white")
    .transition()
    .duration(300)
    .style("font-size","12px")
 // .attr("font-family", "sans-serif")
 // .attr("font-size", "11px")
    .style("visibility", "hidden"); //hide under hover over the node 
    
    
    gnodes.append("text")
    .text(function(d) { 
        return ("Social Engineering Training: " + d.social_eng); 
    })
    .attr("class","nodetext")
    .attr("dx", 0)
    .attr("dy", ".35em")
    .style("font-size","5px")
    .attr("text-anchor", "middle")
    .attr("transform","translate(0, 12)")
    .style("fill", "white")
    .transition()
    .duration(300)
    .style("font-size","12px")
 // .attr("font-family", "sans-serif")
 // .attr("font-size", "11px")
    .style("visibility", "hidden"); //hide under hover over the node 
    
        gnodes.append("text")
    .text(function(d) { 
        return ("Infected with: " + d.infected_with); 
    })
    .attr("class","nodetext")
    .attr("dx", 0)
    .attr("dy", ".35em")
    .style("font-size","5px")
    .attr("text-anchor", "middle")
    .attr("transform","translate(0, 24)")
    //.style("fill", "white")
    .transition()
    .duration(300)
    .style("font-size","12px")
 // .attr("font-family", "sans-serif")
 // .attr("font-size", "11px")
    .style("visibility", "hidden"); //hide under hover over the node
   
//Every time the simulation "ticks", this will be called
  force.on("tick", function() {
    edges.attr("x1", function(d) { return d.source.x; })
         .attr("y1", function(d) { return d.source.y; })
	     .attr("x2", function(d) { return d.target.x; })
	     .attr("y2", function(d) { return d.target.y; });

    gnodes.attr("transform", function(d) { 
        temp = 'translate(' + [d.x, d.y] + ')'
      return 'translate(' + [d.x, d.y] + ')';         
     })
  });
}

function generate_graph_data(num_nodes, type)
{
    var i, j, dataset = {
        nodes :[],
        edges :[]
    }

    if(type == "line")
    {
      for(i = 0; i < num_nodes; i++)
      {
          dataset.nodes.push({name: "node " + i, system_type: "W32"
                             , social_eng: "false"
                             , intrusion_detect: " false"
                             , honeypot: " false"
                             , adjacent_to: []});
         if(i == 0)
           dataset.nodes[i].adjacent_to.push(i+1);
         else if(i == num_nodes - 1)
           dataset.nodes[i].adjacent_to.push(i-1);
         else
           dataset.nodes[i].adjacent_to.push(i-1, i+1);
      }
        
      for(j = 0; j <  num_nodes - 1; j++)
        dataset.edges.push({ source: j, target: j + 1 });
    }
    else if(type == "star")
    {
      dataset.nodes.push({name: "Central Hub", system_type: "NA"
                             , social_eng: "false"
                             , intrusion_detect: " false"
                             , honeypot: " false"
                             , adjacent_to: []});
        
      for(i = 0 ; i < num_nodes; i++)
      {
          dataset.nodes.push({name: "node " + i, system_type: "W32"
                             , social_eng: "false"
                             , intrusion_detect: " false"
                             , honeypot: " false"
                             , adjacent_to: []});
      }
        
      for(j = 1; j <  num_nodes + 1; j++)
        dataset.edges.push({ source: j, target: 0 });
    }
    else if(type == "ring")
    {
      for(i = 0; i < num_nodes; i++)
      {
          dataset.nodes.push({name: "node " + i, system_type: "W32"
                             , social_eng: "false"
                             , intrusion_detect: " false"
                             , honeypot: " false"
                             , adjacent_to: []});
         if(i == 0)
           dataset.nodes[i].adjacent_to.push(i+1);
         else if(i == num_nodes - 1)
           dataset.nodes[i].adjacent_to.push(i-1, 0);
         else
           dataset.nodes[i].adjacent_to.push(i-1, i+1);
      }
        
      for(j = 0; j <  num_nodes - 1; j++)
        dataset.edges.push({ source: j, target: j + 1 });
      dataset.edges.push({ source: j, target: 0 });
    }
    else if(type == "complete")
    {
     
      for(i = 0; i < num_nodes; i++)
      {
          dataset.nodes.push({name: "node " + i, system_type: "W32"
                             , social_eng: "false"
                             , intrusion_detect: " false"
                             , honeypot: " false"
                             , adjacent_to: []});    
      }
      //n(n-1)/2 nodes in complete graph
      for(j = 0; j < num_nodes; j++)
      {
          for(i = 0; i < num_nodes; i++)
          {
            if(i != j)
                dataset.edges.push({source: j, target: i});
          }
      }
    }
    
    return dataset;
}

//generate_graph_data(5, "line")

var test = generate_graph_data(20, "complete")
generate_graph(test);
